
var defines the variable

camelCase is correct 

"increment" i = i + 1;  > i++ , "decrement" i--;

The "remainder" operator % gives the remainder of the division of two numbers.

In mathematics, a number can be checked even or odd by checking the remainder of the division of the number by2. 
17 % 2 = 1 (17 is Odd)  -  48 % 2 = 0 (48 is Even)

+= handles compound assignment 


/* This Converts Celsius to Fahrenheit */

function convert(celsius) {
  // Only change code below this line
var fahrenheit = 32 + 9/5 * celsius;   

  // Only change code above this line
  if ( typeof fahrenheit !== 'undefined' ) {
    return fahrenheit;
  } else {
    return 'fahrenheit not defined';
  }
}

convert(30);


To escape quotes, use \infront of the quote
Quotes are not the only characters that can be escaped inside a string. Here is a table of common escape sequences:

Code	Output
\'	single quote
\"	double quote
\\	backslash
\n	new line
\r	carriage return
\t	tab
\b	backspace
\f	form feed
Note that the backslash itself must be escaped in order to display as a backslash.

add strings using + or add lines of strings using +=


return a string's character length using .length


<!-- EQUALITY STATEMNETS -->

            Equality, strict equality, inequality == === !=
            
            <!-- Return a value according to an equality statement -->
            // Setup
            function testNotEqual(val) {
              if (val != 99) { // Change this line
                return "Not Equal";
              }
              return "Equal";
            }
            
            // Change this value to test
            testNotEqual(99);
            
            <!-- returns "Equal" -->
            
            <!-- greater than, less than, equal to -->
            > and < are another way to return a value 
            >= <= are clear 


<!-- LOGICAL AND -->

        Sometimes you will need to test more than one thing at a time. The logical and operator (&&) returns true if and only if the operands to the left and right of it are true.
        
        The same effect could be achieved by nesting an if statement inside another if:
        
        if (num > 5) {
          if (num < 10) {
            return "Yes";
          }
        }
        return "No";
        will only return "Yes" if num is between 6 and 9 (6 and 9 included). The same logic can be written as:
        
        if (num > 5 && num < 10) {
          return "Yes";
        }
        return "No";


<!-- LOGICAL OR -->

    The logical or operator (||) returns true if either of the operands is true. Otherwise, it returns false.
    
    The pattern below should look familiar from prior waypoints:
    
    if (num > 10) {
      return "No";
    }
    if (num < 5) {
      return "No";
    }
    return "Yes";
    will return "Yes" only if num is between 5 and 10 (5 and 10 included). The same logic can be written as:


<!-- ELSE STATEMENT -->
        function testNotEqual(val) {
              if (val > 99) { 
                return "Greater than 99";
              } else { 
              return "Less than 99";
            }
            
<!-- IF ELSE check in ORDER -->

<!-- DONT FORGET TO CAPITALIZE -->





